// <auto-generated />
using System;
using LibrarifyAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibrarifyAPI.Migrations
{
    [DbContext(typeof(LibraryContext))]
    partial class LibraryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibrarifyAPI.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DigitalUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "J.R.R. Tolkien",
                            Description = "The first part of J.R.R. Tolkien's epic adventure, The Lord of the Rings.",
                            DigitalUrl = "https://example.com/fellowship-ring",
                            Genre = "Fantasy",
                            ISBN = "9780261103573",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1954, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Fellowship of the Ring"
                        },
                        new
                        {
                            Id = 2,
                            Author = "J.R.R. Tolkien",
                            Description = "The second part of J.R.R. Tolkien's epic adventure, The Lord of the Rings.",
                            DigitalUrl = "https://example.com/two-towers",
                            Genre = "Fantasy",
                            ISBN = "9780261102361",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1954, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Two Towers"
                        },
                        new
                        {
                            Id = 3,
                            Author = "J.R.R. Tolkien",
                            Description = "The final part of J.R.R. Tolkien's epic adventure, The Lord of the Rings.",
                            DigitalUrl = "https://example.com/return-king",
                            Genre = "Fantasy",
                            ISBN = "9780261102378",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1955, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Return of the King"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Agatha Christie",
                            Description = "Detective Hercule Poirot investigates a murder aboard a luxury train.",
                            DigitalUrl = "https://example.com/orient-express",
                            Genre = "Mystery",
                            ISBN = "9780062693662",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1934, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Murder on the Orient Express"
                        },
                        new
                        {
                            Id = 5,
                            Author = "Frank Herbert",
                            Description = "A science fiction epic set on the desert planet Arrakis.",
                            DigitalUrl = "https://example.com/dune",
                            Genre = "Science Fiction",
                            ISBN = "9780441013593",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1965, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dune"
                        },
                        new
                        {
                            Id = 6,
                            Author = "Jane Austen",
                            Description = "A classic romantic novel about love and society.",
                            DigitalUrl = "https://example.com/pride-prejudice",
                            Genre = "Romance",
                            ISBN = "9780141199078",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 7,
                            Author = "Harper Lee",
                            Description = "A story of racial injustice in the Deep South.",
                            DigitalUrl = "https://example.com/mockingbird",
                            Genre = "Fiction",
                            ISBN = "9780061120084",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1960, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 8,
                            Author = "George Orwell",
                            Description = "A novel depicting a totalitarian society under constant surveillance.",
                            DigitalUrl = "https://example.com/1984",
                            Genre = "Dystopian",
                            ISBN = "9780451524935",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1949, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "1984"
                        },
                        new
                        {
                            Id = 9,
                            Author = "Herman Melville",
                            Description = "A seafaring tale of obsession and revenge.",
                            DigitalUrl = "https://example.com/moby-dick",
                            Genre = "Adventure",
                            ISBN = "9781503280786",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1851, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Moby-Dick"
                        },
                        new
                        {
                            Id = 10,
                            Author = "F. Scott Fitzgerald",
                            Description = "A novel about the American Dream and the roaring twenties.",
                            DigitalUrl = "https://example.com/gatsby",
                            Genre = "Classic",
                            ISBN = "9780743273565",
                            IsAvailable = false,
                            PublishedDate = new DateTime(1925, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 11,
                            Author = "Bram Stoker",
                            Description = "The tale of Count Dracula's attempt to spread vampirism.",
                            DigitalUrl = "https://example.com/dracula",
                            Genre = "Horror",
                            ISBN = "9780486411095",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1897, 5, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Dracula"
                        },
                        new
                        {
                            Id = 12,
                            Author = "J.R.R. Tolkien",
                            Description = "A prequel to The Lord of the Rings, following Bilbo's journey.",
                            DigitalUrl = "https://example.com/hobbit",
                            Genre = "Fantasy",
                            ISBN = "9780547928227",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1937, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 13,
                            Author = "Aldous Huxley",
                            Description = "A futuristic society where individuality is suppressed.",
                            DigitalUrl = "https://example.com/brave-new-world",
                            Genre = "Dystopian",
                            ISBN = "9780060850524",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1932, 8, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = 14,
                            Author = "Leo Tolstoy",
                            Description = "An epic tale of Russian society during the Napoleonic Wars.",
                            DigitalUrl = "https://example.com/war-peace",
                            Genre = "Historical Fiction",
                            ISBN = "9780307266934",
                            IsAvailable = false,
                            PublishedDate = new DateTime(1869, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = 15,
                            Author = "Dan Brown",
                            Description = "A modern thriller involving secret societies and hidden messages.",
                            DigitalUrl = "https://example.com/da-vinci-code",
                            Genre = "Thriller",
                            ISBN = "9780307474278",
                            IsAvailable = true,
                            PublishedDate = new DateTime(2003, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Da Vinci Code"
                        },
                        new
                        {
                            Id = 16,
                            Author = "J.D. Salinger",
                            Description = "A classic novel about teenage angst and rebellion.",
                            DigitalUrl = "https://example.com/catcher-rye",
                            Genre = "Fiction",
                            ISBN = "9780316769488",
                            IsAvailable = false,
                            PublishedDate = new DateTime(1951, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 17,
                            Author = "Arthur Conan Doyle",
                            Description = "A collection of short stories featuring Sherlock Holmes and his detective work.",
                            DigitalUrl = "https://example.com/sherlock-holmes",
                            Genre = "Mystery",
                            ISBN = "9781508475316",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1892, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Adventures of Sherlock Holmes"
                        },
                        new
                        {
                            Id = 18,
                            Author = "Cormac McCarthy",
                            Description = "A haunting novel about a father and son's journey through a post-apocalyptic world.",
                            DigitalUrl = "https://example.com/the-road",
                            Genre = "Post-Apocalyptic Fiction",
                            ISBN = "9780307387899",
                            IsAvailable = true,
                            PublishedDate = new DateTime(2006, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Road"
                        },
                        new
                        {
                            Id = 19,
                            Author = "Mary Shelley",
                            Description = "A novel exploring the consequences of scientific ambition and creation.",
                            DigitalUrl = "https://example.com/frankenstein",
                            Genre = "Horror",
                            ISBN = "9780486282114",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1818, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Frankenstein"
                        },
                        new
                        {
                            Id = 20,
                            Author = "Homer",
                            Description = "An ancient Greek epic following Odysseus's journey home after the Trojan War.",
                            DigitalUrl = "https://example.com/odyssey",
                            Genre = "Epic",
                            ISBN = "9780140268867",
                            IsAvailable = true,
                            PublishedDate = new DateTime(700, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Odyssey"
                        },
                        new
                        {
                            Id = 21,
                            Author = "Leo Tolstoy",
                            Description = "A novel about a tragic love affair set against Russian high society.",
                            DigitalUrl = "https://example.com/anna-karenina",
                            Genre = "Literary Fiction",
                            ISBN = "9780143035008",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1877, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Anna Karenina"
                        },
                        new
                        {
                            Id = 22,
                            Author = "Paulo Coelho",
                            Description = "A story of a shepherd's journey to fulfill his personal legend.",
                            DigitalUrl = "https://example.com/alchemist",
                            Genre = "Philosophical Fiction",
                            ISBN = "9780061122418",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1988, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Alchemist"
                        },
                        new
                        {
                            Id = 23,
                            Author = "Miguel de Cervantes",
                            Description = "A comedic tale of a man who believes he's a knight and his adventures.",
                            DigitalUrl = "https://example.com/don-quixote",
                            Genre = "Classic",
                            ISBN = "9780060934340",
                            IsAvailable = false,
                            PublishedDate = new DateTime(1605, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Don Quixote"
                        },
                        new
                        {
                            Id = 24,
                            Author = "Emily Brontë",
                            Description = "A novel about intense and tragic love on the English moors.",
                            DigitalUrl = "https://example.com/wuthering-heights",
                            Genre = "Gothic Fiction",
                            ISBN = "9780141439556",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1847, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Wuthering Heights"
                        },
                        new
                        {
                            Id = 25,
                            Author = "Alexandre Dumas",
                            Description = "A tale of betrayal, imprisonment, and revenge.",
                            DigitalUrl = "https://example.com/monte-cristo",
                            Genre = "Adventure",
                            ISBN = "9780140449266",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1844, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Count of Monte Cristo"
                        },
                        new
                        {
                            Id = 26,
                            Author = "Fyodor Dostoevsky",
                            Description = "A Russian novel about morality, faith, and familial bonds.",
                            DigitalUrl = "https://example.com/brothers-karamazov",
                            Genre = "Philosophical Fiction",
                            ISBN = "9780374528379",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1880, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Brothers Karamazov"
                        },
                        new
                        {
                            Id = 27,
                            Author = "Oscar Wilde",
                            Description = "A novel about vanity, moral corruption, and the supernatural.",
                            DigitalUrl = "https://example.com/dorian-gray",
                            Genre = "Philosophical Fiction",
                            ISBN = "9780141439570",
                            IsAvailable = false,
                            PublishedDate = new DateTime(1890, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Picture of Dorian Gray"
                        },
                        new
                        {
                            Id = 28,
                            Author = "Victor Hugo",
                            Description = "A tale of social justice, love, and redemption in 19th century France.",
                            DigitalUrl = "https://example.com/les-miserables",
                            Genre = "Historical Fiction",
                            ISBN = "9780451419439",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1862, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Les Misérables"
                        },
                        new
                        {
                            Id = 29,
                            Author = "Charles Dickens",
                            Description = "A novel set during the French Revolution, exploring themes of sacrifice and resurrection.",
                            DigitalUrl = "https://example.com/tale-two-cities",
                            Genre = "Historical Fiction",
                            ISBN = "9780486406510",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1859, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "A Tale of Two Cities"
                        },
                        new
                        {
                            Id = 30,
                            Author = "James Joyce",
                            Description = "A groundbreaking novel that captures a single day in the life of Leopold Bloom in Dublin.",
                            DigitalUrl = "https://example.com/ulysses",
                            Genre = "Modernist",
                            ISBN = "9780394703800",
                            IsAvailable = false,
                            PublishedDate = new DateTime(1922, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Ulysses"
                        },
                        new
                        {
                            Id = 31,
                            Author = "Dante Alighieri",
                            Description = "An allegorical journey through Hell, Purgatory, and Paradise.",
                            DigitalUrl = "https://example.com/divine-comedy",
                            Genre = "Epic Poetry",
                            ISBN = "9780142437223",
                            IsAvailable = true,
                            PublishedDate = new DateTime(1320, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Divine Comedy"
                        });
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Fee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoanId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.HasIndex("UserId");

                    b.ToTable("Fee");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Loans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            DueDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            DueDate = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = true,
                            LoanDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            DueDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            DueDate = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            DueDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            DueDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = true,
                            LoanDate = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            DueDate = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            DueDate = new DateTime(2024, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            BookId = 9,
                            DueDate = new DateTime(2024, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = true,
                            LoanDate = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            BookId = 10,
                            DueDate = new DateTime(2024, 11, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        },
                        new
                        {
                            Id = 11,
                            BookId = 1,
                            DueDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 7
                        },
                        new
                        {
                            Id = 12,
                            BookId = 2,
                            DueDate = new DateTime(2024, 11, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 8
                        },
                        new
                        {
                            Id = 13,
                            BookId = 3,
                            DueDate = new DateTime(2024, 11, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = true,
                            LoanDate = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 9
                        },
                        new
                        {
                            Id = 14,
                            BookId = 4,
                            DueDate = new DateTime(2024, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 10
                        },
                        new
                        {
                            Id = 15,
                            BookId = 5,
                            DueDate = new DateTime(2024, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            BookId = 6,
                            DueDate = new DateTime(2024, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            BookId = 7,
                            DueDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReturnDate = new DateTime(2024, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 18,
                            BookId = 8,
                            DueDate = new DateTime(2024, 12, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = true,
                            LoanDate = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 19,
                            BookId = 9,
                            DueDate = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 20,
                            BookId = 10,
                            DueDate = new DateTime(2024, 12, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExtended = false,
                            LoanDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            Comment = "An epic journey full of adventure and friendship!",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            Comment = "A beautifully written tale, but a bit slow at times.",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            Comment = "A haunting and powerful story that stays with you.",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            Comment = "Interesting concept but lacked depth in character development.",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 5,
                            Comment = "A thrilling ride from start to finish!",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 6,
                            BookId = 6,
                            Comment = "A masterpiece of literature, highly recommend.",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            BookId = 7,
                            Comment = "I struggled to get through this one.",
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 8,
                            BookId = 8,
                            Comment = "Very engaging and well-written.",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 9,
                            BookId = 9,
                            Comment = "An absolute must-read for everyone!",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 10,
                            BookId = 10,
                            Comment = "Good, but I've read better.",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        },
                        new
                        {
                            Id = 11,
                            BookId = 1,
                            Comment = "An adventure that was very well done!",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 7
                        },
                        new
                        {
                            Id = 12,
                            BookId = 2,
                            Comment = "Absolutely loved this book!",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 8
                        },
                        new
                        {
                            Id = 13,
                            BookId = 3,
                            Comment = "Powerful themes and great writing.",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 9
                        },
                        new
                        {
                            Id = 14,
                            BookId = 4,
                            Comment = "Had potential, but it fell flat in some areas.",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 10
                        },
                        new
                        {
                            Id = 15,
                            BookId = 5,
                            Comment = "Very enjoyable read!",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 1
                        },
                        new
                        {
                            Id = 16,
                            BookId = 6,
                            Comment = "A work of art that deserves recognition.",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2
                        },
                        new
                        {
                            Id = 17,
                            BookId = 7,
                            Comment = "Did not meet my expectations.",
                            Rating = 2,
                            ReviewDate = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 3
                        },
                        new
                        {
                            Id = 18,
                            BookId = 8,
                            Comment = "A solid read, very entertaining.",
                            Rating = 4,
                            ReviewDate = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4
                        },
                        new
                        {
                            Id = 19,
                            BookId = 9,
                            Comment = "Incredible story, I couldn't put it down!",
                            Rating = 5,
                            ReviewDate = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5
                        },
                        new
                        {
                            Id = 20,
                            BookId = 10,
                            Comment = "An average book, not my favorite.",
                            Rating = 3,
                            ReviewDate = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 6
                        });
                });

            modelBuilder.Entity("LibrarifyAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateJoined")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("IsAccountActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateJoined = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "frodo.baggins@shire.com",
                            FirstName = "Frodo",
                            IsAccountActive = true,
                            LastName = "Baggins",
                            Password = "Frodo1234",
                            UserName = "frodo_the_ringbearer"
                        },
                        new
                        {
                            Id = 2,
                            DateJoined = new DateTime(2024, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "aragorn@numenor.com",
                            FirstName = "Aragorn",
                            IsAccountActive = true,
                            LastName = "Elessar",
                            Password = "Aragorn1234",
                            UserName = "king_elessar"
                        },
                        new
                        {
                            Id = 3,
                            DateJoined = new DateTime(2024, 11, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gandalf@wizardry.com",
                            FirstName = "Gandalf",
                            IsAccountActive = true,
                            LastName = "The Grey",
                            Password = "Gandalf1234",
                            UserName = "gandalf_the_wise"
                        },
                        new
                        {
                            Id = 4,
                            DateJoined = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "legolas@woodland.com",
                            FirstName = "Legolas",
                            IsAccountActive = true,
                            LastName = "Greenleaf",
                            Password = "Legolas1234",
                            UserName = "elven_archer"
                        },
                        new
                        {
                            Id = 5,
                            DateJoined = new DateTime(2024, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gimli@dwarvenrealm.com",
                            FirstName = "Gimli",
                            IsAccountActive = true,
                            LastName = "Son of Glóin",
                            Password = "Gimli1234",
                            UserName = "gimli_the_dwarf"
                        },
                        new
                        {
                            Id = 6,
                            DateJoined = new DateTime(2024, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "samwise.gamgee@shire.com",
                            FirstName = "Samwise",
                            IsAccountActive = true,
                            LastName = "Gamgee",
                            Password = "Samwise1234",
                            UserName = "loyal_sam"
                        },
                        new
                        {
                            Id = 7,
                            DateJoined = new DateTime(2024, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "merry.brandybuck@shire.com",
                            FirstName = "Meriadoc",
                            IsAccountActive = true,
                            LastName = "Brandybuck",
                            Password = "Merry1234",
                            UserName = "merry_mischief"
                        },
                        new
                        {
                            Id = 8,
                            DateJoined = new DateTime(2024, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "pippin.took@shire.com",
                            FirstName = "Peregrin",
                            IsAccountActive = true,
                            LastName = "Took",
                            Password = "Pippin1234",
                            UserName = "pippin_the_fool"
                        },
                        new
                        {
                            Id = 9,
                            DateJoined = new DateTime(2024, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "boromir@gondor.com",
                            FirstName = "Boromir",
                            IsAccountActive = true,
                            LastName = "Son of Denethor",
                            Password = "Boromir1234",
                            UserName = "boromir_of_gondor"
                        },
                        new
                        {
                            Id = 10,
                            DateJoined = new DateTime(2024, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "saruman@isengard.com",
                            FirstName = "Saruman",
                            IsAccountActive = false,
                            LastName = "The White",
                            Password = "Saruman1234",
                            UserName = "saruman_the_white"
                        },
                        new
                        {
                            Id = 11,
                            DateJoined = new DateTime(2024, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "elrond@rivendell.com",
                            FirstName = "Elrond",
                            IsAccountActive = true,
                            LastName = "Half-elven",
                            Password = "Elrond1234",
                            UserName = "lord_of_rivendell"
                        },
                        new
                        {
                            Id = 12,
                            DateJoined = new DateTime(2024, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "arwen@rivendell.com",
                            FirstName = "Arwen",
                            IsAccountActive = true,
                            LastName = "Undómiel",
                            Password = "Arwen1234",
                            UserName = "evenstar"
                        },
                        new
                        {
                            Id = 13,
                            DateJoined = new DateTime(2024, 11, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "galadriel@lorien.com",
                            FirstName = "Galadriel",
                            IsAccountActive = true,
                            LastName = "Lady of Light",
                            Password = "Galadriel1234",
                            UserName = "lady_galadriel"
                        },
                        new
                        {
                            Id = 14,
                            DateJoined = new DateTime(2024, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eowyn@rohan.com",
                            FirstName = "Éowyn",
                            IsAccountActive = true,
                            LastName = "Shieldmaiden",
                            Password = "Eowyn1234",
                            UserName = "eowyn_shieldmaiden"
                        },
                        new
                        {
                            Id = 15,
                            DateJoined = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "theoden@rohan.com",
                            FirstName = "Théoden",
                            IsAccountActive = true,
                            LastName = "King of Rohan",
                            Password = "Theoden1234",
                            UserName = "king_theoden"
                        },
                        new
                        {
                            Id = 16,
                            DateJoined = new DateTime(2024, 11, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "faramir@gondor.com",
                            FirstName = "Faramir",
                            IsAccountActive = true,
                            LastName = "Son of Denethor",
                            Password = "Faramir1234",
                            UserName = "faramir_of_gondor"
                        },
                        new
                        {
                            Id = 17,
                            DateJoined = new DateTime(2024, 11, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "gollum@stoor.com",
                            FirstName = "Gollum",
                            IsAccountActive = false,
                            LastName = "Smeagol",
                            Password = "Gollum1234",
                            UserName = "my_precious"
                        },
                        new
                        {
                            Id = 18,
                            DateJoined = new DateTime(2024, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bilbo.baggins@shire.com",
                            FirstName = "Bilbo",
                            IsAccountActive = true,
                            LastName = "Baggins",
                            Password = "Bilbo1234",
                            UserName = "burglar_bilbo"
                        },
                        new
                        {
                            Id = 19,
                            DateJoined = new DateTime(2024, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "treebeard@fangorn.com",
                            FirstName = "Treebeard",
                            IsAccountActive = true,
                            LastName = "The Ent",
                            Password = "Treebeard1234",
                            UserName = "treebeard_ent"
                        },
                        new
                        {
                            Id = 20,
                            DateJoined = new DateTime(2024, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "eomer@rohan.com",
                            FirstName = "Éomer",
                            IsAccountActive = true,
                            LastName = "Marshal of the Mark",
                            Password = "Eomer1234",
                            UserName = "marshal_eomer"
                        });
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Fee", b =>
                {
                    b.HasOne("LibrarifyAPI.Models.Loan", "Loan")
                        .WithMany()
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarifyAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Loan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Loan", b =>
                {
                    b.HasOne("LibrarifyAPI.Models.Book", "Book")
                        .WithMany("Loans")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarifyAPI.Models.User", "User")
                        .WithMany("Loans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Notification", b =>
                {
                    b.HasOne("LibrarifyAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Review", b =>
                {
                    b.HasOne("LibrarifyAPI.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarifyAPI.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.Book", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibrarifyAPI.Models.User", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
